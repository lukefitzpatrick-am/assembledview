"use client"

import { useState, useEffect } from "react"
import { useForm, useFieldArray } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Textarea } from "@/components/ui/textarea"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { DatePicker } from "@/components/ui/date-picker"
import { useToast } from "@/components/ui/use-toast"
import { getSearchLineItems, createSearchLineItem, createSearchBurst, getPublishersForSearch } from "@/lib/api"

const searchLineItemSchema = z.object({
  platform: z.string().min(1, "Platform is required"),
  bidStrategy: z.string().min(1, "Bid Strategy is required"),
  buyType: z.string().min(1, "Buy Type is required"),
  creativeTargeting: z.string(),
  fixedCostMedia: z.boolean(),
  clientPaysForMedia: z.boolean(),
  bursts: z
    .array(
      z.object({
        budget: z.number().min(0, "Budget must be a positive number"),
        buyAmount: z.number().min(0, "Buy Amount must be a positive number"),
        startDate: z.date(),
        endDate: z.date(),
        impressions: z.number().int().min(0, "Impressions must be a positive integer"),
        clicks: z.number().int().min(0, "Clicks must be a positive integer"),
        conversions: z.number().int().min(0, "Conversions must be a positive integer"),
      }),
    )
    .min(1, "At least one burst is required")
    .max(12, "Maximum of 12 bursts allowed"),
})

type SearchLineItemFormValues = z.infer<typeof searchLineItemSchema>

interface Publisher {
  id: number
  publisher_name: string
}

export default function SearchContainer() {
  const [lineItems, setLineItems] = useState([])
  const [versionHistory, setVersionHistory] = useState([])
  const [publishers, setPublishers] = useState<Publisher[]>([])
  const { toast } = useToast()

  const form = useForm<SearchLineItemFormValues>({
    resolver: zodResolver(searchLineItemSchema),
    defaultValues: {
      platform: "",
      bidStrategy: "",
      buyType: "",
      creativeTargeting: "",
      fixedCostMedia: false,
      clientPaysForMedia: false,
      bursts: [
        {
          budget: 0,
          buyAmount: 0,
          startDate: new Date(),
          endDate: new Date(),
          impressions: 0,
          clicks: 0,
          conversions: 0,
        },
      ],
    },
  })

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "bursts",
  })

  useEffect(() => {
    fetchLineItems()
    fetchPublishers()
  }, [])

  async function fetchLineItems() {
    try {
      const items = await getSearchLineItems()
      setLineItems(items)
    } catch (error) {
      console.error("Error fetching line items:", error)
      toast({
        title: "Error",
        description: "Failed to fetch line items. Please try again.",
        variant: "destructive",
      })
    }
  }

  async function fetchPublishers() {
    try {
      const fetchedPublishers = await getPublishersForSearch()
      setPublishers(fetchedPublishers)
    } catch (error) {
      console.error("Error fetching publishers:", error)
      toast({
        title: "Error",
        description: "Failed to fetch publishers. Please try again.",
        variant: "destructive",
      })
      setPublishers([]) // Set empty array in case of error
    }
  }

  async function onSubmit(data: SearchLineItemFormValues) {
    try {
      const lineItem = await createSearchLineItem(data)
      for (const burst of data.bursts) {
        await createSearchBurst({ ...burst, searchLineItemId: lineItem.id })
      }
      toast({
        title: "Success",
        description: "Search line item created successfully.",
      })
      form.reset()
      fetchLineItems()
    } catch (error) {
      console.error("Error creating search line item:", error)
      toast({
        title: "Error",
        description: "Failed to create search line item. Please try again.",
        variant: "destructive",
      })
    }
  }

  const totalBudget = form.watch("bursts").reduce((sum, burst) => sum + (burst.budget || 0), 0)
  const totalImpressions = form.watch("bursts").reduce((sum, burst) => sum + (burst.impressions || 0), 0)
  const totalClicks = form.watch("bursts").reduce((sum, burst) => sum + (burst.clicks || 0), 0)
  const totalConversions = form.watch("bursts").reduce((sum, burst) => sum + (burst.conversions || 0), 0)

  const handleSubmit = async () => {
    const isValid = await form.trigger()
    if (isValid) {
      const data = form.getValues()
      onSubmit(data)
    }
  }

  return (
    <div className="space-y-6">
      <Form {...form}>
        <div className="space-y-6">
          <Card>
            <CardHeader className="pb-4">
              <CardTitle className="text-lg font-medium">Search Line Item</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-3 gap-4">
                <FormField
                  control={form.control}
                  name="platform"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Platform</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select platform" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {publishers.map((publisher) => (
                            <SelectItem key={publisher.id} value={publisher.publisher_name}>
                              {publisher.publisher_name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="bidStrategy"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Bid Strategy</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select bid strategy" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="target_roas">Target ROAS</SelectItem>
                          <SelectItem value="manual_cpc">Manual CPC</SelectItem>
                          <SelectItem value="maximize_conversions">Maximize Conversions</SelectItem>
                          <SelectItem value="target_cpa">Target CPA</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="buyType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Buy Type</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select buy type" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="cpc">CPC</SelectItem>
                          <SelectItem value="cpm">CPM</SelectItem>
                          <SelectItem value="cpv">CPV</SelectItem>
                          <SelectItem value="fixed_cost">Fixed Cost</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="creativeTargeting"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Creative Targeting</FormLabel>
                    <FormControl>
                      <Textarea {...field} placeholder="Enter creative targeting details" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex space-x-4">
                <FormField
                  control={form.control}
                  name="fixedCostMedia"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                      <FormControl>
                        <Checkbox checked={field.value} onCheckedChange={field.onChange} />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>Fixed Cost Media</FormLabel>
                      </div>
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="clientPaysForMedia"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                      <FormControl>
                        <Checkbox checked={field.value} onCheckedChange={field.onChange} />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>Client Pays for Media</FormLabel>
                      </div>
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>{/* CardTitle and CardDescription removed */}</CardHeader>
            <CardContent className="space-y-4">
              {fields.map((field, index) => (
                <Card key={field.id}>
                  <CardHeader>
                    <CardTitle>Burst {index + 1}</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name={`bursts.${index}.budget`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Budget</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                {...field}
                                onChange={(e) => field.onChange(Number.parseFloat(e.target.value))}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name={`bursts.${index}.buyAmount`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Buy Amount</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                {...field}
                                onChange={(e) => field.onChange(Number.parseFloat(e.target.value))}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name={`bursts.${index}.startDate`}
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel>Start Date</FormLabel>
                            <DatePicker date={field.value} setDate={(date) => field.onChange(date)} />
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name={`bursts.${index}.endDate`}
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel>End Date</FormLabel>
                            <DatePicker date={field.value} setDate={(date) => field.onChange(date)} />
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="grid grid-cols-3 gap-4">
                      <FormField
                        control={form.control}
                        name={`bursts.${index}.impressions`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Impressions</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                {...field}
                                onChange={(e) => field.onChange(Number.parseInt(e.target.value, 10))}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name={`bursts.${index}.clicks`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Clicks</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                {...field}
                                onChange={(e) => field.onChange(Number.parseInt(e.target.value, 10))}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name={`bursts.${index}.conversions`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Conversions</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                {...field}
                                onChange={(e) => field.onChange(Number.parseInt(e.target.value, 10))}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button type="button" variant="destructive" onClick={() => remove(index)}>
                      Remove Burst
                    </Button>
                  </CardFooter>
                </Card>
              ))}

              <Button
                type="button"
                onClick={() =>
                  append({
                    budget: 0,
                    buyAmount: 0,
                    startDate: new Date(),
                    endDate: new Date(),
                    impressions: 0,
                    clicks: 0,
                    conversions: 0,
                  })
                }
              >
                + Add Burst
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Totals</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="font-semibold">Total Budget:</p>
                  <p>${totalBudget.toFixed(2)}</p>
                </div>
                <div>
                  <p className="font-semibold">Total Impressions:</p>
                  <p>{totalImpressions.toLocaleString()}</p>
                </div>
                <div>
                  <p className="font-semibold">Total Clicks:</p>
                  <p>{totalClicks.toLocaleString()}</p>
                </div>
                <div>
                  <p className="font-semibold">Total Conversions:</p>
                  <p>{totalConversions.toLocaleString()}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Button type="button" onClick={handleSubmit}>
            Create Search Line Item
          </Button>
        </div>
      </Form>

      <Card>
        <CardHeader>
          <CardTitle>Version History</CardTitle>
        </CardHeader>
        <CardContent>
          {versionHistory.length > 0 ? (
            <ul className="space-y-2">
              {versionHistory.map((version, index) => (
                <li key={index} className="text-sm">
                  {version.timestamp} - {version.user}: {version.action}
                </li>
              ))}
            </ul>
          ) : (
            <p>No version history available.</p>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

