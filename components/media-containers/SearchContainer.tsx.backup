"use client"

import { useState, useEffect, useRef } from "react"
import { useForm, useFieldArray } from "react-hook-form"
import { useWatch } from "react-hook-form"
import { useMemo } from "react";
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Textarea } from "@/components/ui/textarea"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { useToast } from "@/components/ui/use-toast"
import { getPublishersForSearch, getClientInfo } from "@/lib/api"
import { format } from "date-fns"
import { useMediaPlanContext } from "@/contexts/MediaPlanContext"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { CalendarIcon } from "lucide-react"
import { cn } from "@/lib/utils"
import { ChevronDown, Trash2 } from "lucide-react"

// ðŸ†• Exported utility function to get bursts
export function getAllBursts(form) {
  const lineItems = form.getValues("lineItems") || [];

  return lineItems.flatMap((lineItem) =>
    lineItem.bursts.map((burst) => ({
      startDate: burst.startDate,
      endDate: burst.endDate,
      budget: burst.budget,
    }))
  );
}

const burstSchema = z.object({
  budget: z.string().min(1, "Budget is required"),
  buyAmount: z.string().min(1, "Buy Amount is required"),
  startDate: z.date(),
  endDate: z.date(),
  calculatedValue: z.number().optional(),
})

const lineItemSchema = z.object({
  platform: z.string().min(1, "Platform is required"),
  bidStrategy: z.string().min(1, "Bid Strategy is required"),
  buyType: z.string().min(1, "Buy Type is required"),
  creativeTargeting: z.string(),
  fixedCostMedia: z.boolean(),
  clientPaysForMedia: z.boolean(),
  bursts: z.array(burstSchema).min(1, "At least one burst is required"),
  // âœ… Add these fields to match the expected dynamic updates
  totalMedia: z.number().optional(),
  totalDeliverables: z.number().optional(),
  totalFee: z.number().optional(),
})

const searchFormSchema = z.object({
  lineItems: z.array(
    z.object({
      platform: z.string().min(1, "Platform is required"),
      bidStrategy: z.string().min(1, "Bid Strategy is required"),
      buyType: z.string().min(1, "Buy Type is required"),
      creativeTargeting: z.string(),
      fixedCostMedia: z.boolean(),
      clientPaysForMedia: z.boolean(),
      bursts: z.array(
        z.object({
          budget: z.string(),
          buyAmount: z.string(),
          startDate: z.date(),
          endDate: z.date(),
          calculatedValue: z.number(),
        })
      ).min(1, "At least one burst is required"),
      totalMedia: z.number().optional(),
      totalDeliverables: z.number().optional(),
      totalFee: z.number().optional(),
    })
  ),
  overallDeliverables: z.number().optional(),
})

type SearchFormValues = z.infer<typeof searchFormSchema>

interface Publisher {
  id: number
  publisher_name: string
}

interface SearchContainerProps {
  clientId: string;
  onTotalMediaChange: (totalMedia: number, totalFee: number) => void;
  onBurstsChange: (bursts: { startDate: string; endDate: string; budget: number }[]) => void;
  feesearch: number | null;
  onInvestmentChange: (investmentByMonth: { monthYear: string; amount: string }[]) => void;
}

export function getSearchBursts(form, feesearch) {
  const lineItems = form.getValues("lineItems") || [];

  return lineItems.flatMap((lineItem) =>
    lineItem.bursts.map((burst) => {
      const lineMedia = parseFloat(burst.budget.replace(/[^0-9.]/g, "")) || 0;
      const feePercentage = feesearch || 0;
      
      // Calculate total investment including fees
      const totalInvestment = lineMedia + ((lineMedia / (100 - feePercentage)) * feePercentage);
      
      return {
        startDate: burst.startDate,
        endDate: burst.endDate,
        budget: totalInvestment,
      };
    })
  );
}

export function calculateInvestmentPerMonth(form, feesearch) {
  const lineItems = form.getValues("lineItems") || [];
  let monthlyInvestment: Record<string, number> = {};

  lineItems.forEach((lineItem) => {
    lineItem.bursts.forEach((burst) => {
      const startDate = new Date(burst.startDate);
      const endDate = new Date(burst.endDate);
      const lineMedia = parseFloat(burst.budget.replace(/[^0-9.]/g, "")) || 0;
      const feePercentage = feesearch || 0;

      // âœ… Corrected total investment calculation
      const totalInvestment = lineMedia + ((lineMedia / (100 - feePercentage)) * feePercentage);
      const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;

      let current = new Date(startDate);
      while (current <= endDate) {
        const monthYear = `${current.toLocaleString("default", { month: "long" })} ${current.getFullYear()}`;
        
        if (!monthlyInvestment[monthYear]) {
          monthlyInvestment[monthYear] = 0;
        }

        // âœ… Count the number of days in the current month
        const nextMonth = new Date(current);
        nextMonth.setMonth(nextMonth.getMonth() + 1);
        nextMonth.setDate(1);

        const lastDayOfMonth = new Date(nextMonth.getTime() - 1);
        const daysInThisMonth = Math.min(lastDayOfMonth.getDate(), Math.ceil((endDate.getTime() - current.getTime()) / (1000 * 60 * 60 * 24)) + 1);

        const investmentForThisMonth = (totalInvestment / totalDays) * daysInThisMonth;
        monthlyInvestment[monthYear] += investmentForThisMonth;

        // Move to the next month
        current.setMonth(current.getMonth() + 1);
        current.setDate(1);
      }
    });
  });

  return Object.entries(monthlyInvestment).map(([monthYear, amount]) => ({
    monthYear,
    amount: `$${amount.toFixed(2)}`,
  }));
}

export function calculateBurstInvestmentPerMonth(form, feesearch) {
  const lineItems = form.getValues("lineItems") || [];
  let monthlyInvestment: Record<string, number> = {};

  lineItems.forEach((lineItem) => {
    lineItem.bursts.forEach((burst) => {
      const startDate = new Date(burst.startDate);
      const endDate = new Date(burst.endDate);
      const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;
      const burstBudget = parseFloat(burst.budget.replace(/[^0-9.]/g, "")) || 0;
      const feePercentage = feesearch || 0;
      
      // Calculate total investment including fees
      const totalInvestment = burstBudget + ((burstBudget / (100 - feePercentage)) * feePercentage);

      let current = new Date(startDate);
      while (current <= endDate) {
        const monthYear = `${current.toLocaleString("default", { month: "long" })} ${current.getFullYear()}`;

        // Find the number of days in this month that overlap with the burst
        const nextMonth = new Date(current);
        nextMonth.setMonth(nextMonth.getMonth() + 1);
        nextMonth.setDate(1);
        const lastDayOfMonth = new Date(nextMonth.getTime() - 1);
        const daysInThisMonth = Math.min(
          Math.ceil((lastDayOfMonth.getTime() - current.getTime()) / (1000 * 60 * 60 * 24)) + 1,
          Math.ceil((endDate.getTime() - current.getTime()) / (1000 * 60 * 60 * 24)) + 1
        );

        const monthlyBudget = (totalInvestment / totalDays) * daysInThisMonth;

        if (!monthlyInvestment[monthYear]) {
          monthlyInvestment[monthYear] = 0;
        }

        monthlyInvestment[monthYear] += monthlyBudget;

        // Move to the next month
        current.setMonth(current.getMonth() + 1);
        current.setDate(1);
      }
    });
  });

  return Object.entries(monthlyInvestment).map(([monthYear, amount]) => ({
    monthYear,
    amount: amount.toFixed(2),
  }));
}


export default function SearchContainer({ clientId, feesearch, onTotalMediaChange, onBurstsChange, onInvestmentChange }: SearchContainerProps) {
  // Add refs to track previous values
  const prevInvestmentRef = useRef<{ monthYear: string; amount: string }[]>([]);
  const prevBurstsRef = useRef<{ startDate: string; endDate: string; budget: number }[]>([]);

  const [publishers, setPublishers] = useState<Publisher[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const { toast } = useToast()
  const { mbaNumber } = useMediaPlanContext()
  
  const form = useForm<SearchFormValues>({
    resolver: zodResolver(searchFormSchema),
    defaultValues: {
      lineItems: [
        {
          platform: "",
          bidStrategy: "",
          buyType: "",
          creativeTargeting: "",
          fixedCostMedia: false,
          clientPaysForMedia: false,
          bursts: [
            {
              budget: "",
              buyAmount: "",
              startDate: new Date(),
              endDate: new Date(),
              calculatedValue: 0,
            },
          ],
          // âœ… Ensure these default values exist
          totalMedia: 0,
          totalDeliverables: 0,
          totalFee: 0,
        },
      ],
    },
  })

  const watchedLineItems = useWatch({ control: form.control, name: "lineItems" });
  
const overallTotals = useMemo(() => {
  let overallMedia = 0;
  let overallFee = 0;
  let overallCost = 0;
  
  const lineItemTotals = watchedLineItems.map((lineItem, index) => {
    let lineMedia = 0;
    let lineDeliverables = 0;
    let lineFee = 0;
    let lineCost = 0;
  
    lineItem.bursts.forEach((burst) => {
      const budget = parseFloat(burst.budget.replace(/[^0-9.]/g, "")) || 0;
      lineMedia += budget;
      lineDeliverables += burst.calculatedValue || 0;
    });
  
    lineFee = feesearch ? (lineMedia / (100 - feesearch)) * feesearch : 0;
    lineCost = lineMedia + lineFee;
  
    overallMedia += lineMedia;
    overallFee += lineFee;
    overallCost += lineCost;
  
    return {
      index: index + 1,
      deliverables: lineDeliverables,
      media: lineMedia.toFixed(2),
      fee: lineFee.toFixed(2),
      totalCost: lineCost.toFixed(2),
    };
  });
  
  return { lineItemTotals, overallMedia, overallFee, overallCost };
}, [watchedLineItems, feesearch]); // âœ… Dependency array ensures recalculation when data changes
  
  const {
    fields: lineItemFields,
    append: appendLineItem,
    remove: removeLineItem,
  } = useFieldArray({
    control: form.control,
    name: "lineItems",
  })
  
  useEffect(() => {
    const fetchPublishers = async () => {
      try {
        const publishers = await getPublishersForSearch();
        setPublishers(publishers);
      } catch (error) {
        toast({
          title: "Error loading publishers",
          description: error.message,
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };
  
    fetchPublishers();
  }, [clientId, toast]);  // âœ… Publishers only load once on mount
  
  const [overallDeliverables, setOverallDeliverables] = useState(0);
  
  useEffect(() => {
    let totalMedia = 0;
    let totalFee = 0;
    
    watchedLineItems.forEach((lineItem) => {
      let lineMedia = 0;
      lineItem.bursts.forEach((burst) => {
        const budget = parseFloat(burst?.budget?.replace(/[^0-9.]/g, "")) || 0;
        lineMedia += budget;
      });
    
      let lineFee = feesearch ? (lineMedia / (100 - feesearch)) * feesearch : 0;
      totalMedia += lineMedia;
      totalFee += lineFee;
    });
    
    onTotalMediaChange(totalMedia, totalFee); // âœ… Ensure the total fee is sent to page.tsx
  }, [watchedLineItems, onTotalMediaChange, feesearch]);

  // Consolidate the investment and burst calculations into a single effect
  useEffect(() => {
    // Calculate investment per month
    const investmentByMonth = calculateInvestmentPerMonth(form, feesearch || 0);
    
    // Get bursts
    const bursts = getSearchBursts(form, feesearch);
    
    // Only update if there are actual changes
    const hasInvestmentChanges = JSON.stringify(investmentByMonth) !== JSON.stringify(prevInvestmentRef.current);
    const hasBurstChanges = JSON.stringify(bursts) !== JSON.stringify(prevBurstsRef.current);
    
    if (hasInvestmentChanges) {
      onInvestmentChange(investmentByMonth);
      prevInvestmentRef.current = investmentByMonth;
    }
    
    if (hasBurstChanges) {
      onBurstsChange(bursts);
      prevBurstsRef.current = bursts;
    }
  }, [watchedLineItems, feesearch, onInvestmentChange, onBurstsChange]);

  const handleValueChange = (lineItemIndex: number, burstIndex: number) => {
    const burst = form.getValues(`lineItems.${lineItemIndex}.bursts.${burstIndex}`);
    const budget = parseFloat(burst?.budget?.replace(/[^0-9.]/g, "")) || 0;
    const buyAmount = parseFloat(burst?.buyAmount?.replace(/[^0-9.]/g, "")) || 1;
    const buyType = form.getValues(`lineItems.${lineItemIndex}.buyType`);

    let calculatedValue = 0;
    switch (buyType) {
      case "cpc":
      case "cpv":
        calculatedValue = budget / buyAmount;
        break;
      case "cpm":
        calculatedValue = (budget / buyAmount) * 1000;
        break;
      case "fixed_cost":
        calculatedValue = 1;
        break;
      default:
        calculatedValue = 0;
    }

    if (form.getValues(`lineItems.${lineItemIndex}.bursts.${burstIndex}.calculatedValue`) !== calculatedValue) {
      form.setValue(`lineItems.${lineItemIndex}.bursts.${burstIndex}.calculatedValue`, calculatedValue, {
        shouldValidate: true,
        shouldDirty: true,
      });

      // âœ… Trigger recalculation of line item totals
      handleLineItemValueChange(lineItemIndex);
    }
  };

  const handleLineItemValueChange = (lineItemIndex: number) => {
    const lineItems = form.getValues("lineItems") || [];
    let overallMedia = 0;
    let overallFee = 0;
    let overallCost = 0;

    lineItems.forEach((lineItem, index) => {
      let lineMedia = 0;
      let lineFee = 0;
      let lineDeliverables = 0;

      lineItem.bursts.forEach((burst) => {
        const budget = parseFloat(burst?.budget?.replace(/[^0-9.]/g, "")) || 0;
        lineMedia += budget;
        lineDeliverables += burst?.calculatedValue || 0;
      });

      lineFee = feesearch ? (lineMedia / (100 - feesearch)) * feesearch : 0;
      overallMedia += lineMedia;
      overallFee += lineFee;
      overallCost += lineMedia + lineFee;
    });

    // âœ… Store in state instead of form.setValue
    setOverallDeliverables(overallMedia);
    onTotalMediaChange(overallMedia, overallFee);
  };

const handleAppendBurst = (lineItemIndex: number) => {
  const currentBursts = form.getValues(`lineItems.${lineItemIndex}.bursts`) || []
  form.setValue(`lineItems.${lineItemIndex}.bursts`, [
    ...currentBursts,
    {
      budget: "",
      buyAmount: "",
      startDate: new Date(),
      endDate: new Date(),
      calculatedValue: 0,
    },
  ]);

  // âœ… NEW: Ensure line item totals update
  handleLineItemValueChange(lineItemIndex);
};
  
  
    const getDeliverablesLabel = (buyType: string) => {
      switch (buyType.toLowerCase()) {
        case "cpc":
          return "Clicks";
        case "cpv":
          return "Views";
        case "cpm":
          return "Impressions";
        case "fixed_cost":
          return "Fixed Fee";
        default:
          return "Deliverables";
      }
    };

  const handleRemoveBurst = (lineItemIndex: number, burstIndex: number) => {
    const currentBursts = form.getValues(`lineItems.${lineItemIndex}.bursts`) || []
    form.setValue(
      `lineItems.${lineItemIndex}.bursts`,
      currentBursts.filter((_, index) => index !== burstIndex),
    );

  // âœ… NEW: Ensure line item totals update
      handleLineItemValueChange(lineItemIndex);
    };
    
  
    return(
      <div className="space-y-6">
      <div className="mb-6">
    <Card>
      <CardHeader>
        <CardTitle className="pt-4 border-t font-bold text-lg flex justify-between">Search Media</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {overallTotals.lineItemTotals.map((item) => (
          <div key={item.index} className="flex justify-between border-b pb-2">
            <span className="font-medium">Line Item {item.index}</span>
            <div className="flex space-x-4">
              <span>
                  {getDeliverablesLabel(form.getValues(`lineItems.${item.index - 1}.buyType`))}: {item.deliverables.toLocaleString(undefined, { maximumFractionDigits: 0 })}
              </span>
              <span>Media: ${parseFloat(item.media).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
              <span>Fee: ${parseFloat(item.fee).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
              <span>Total Cost: ${parseFloat(item.totalCost).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
            </div>
          </div>
     ))}
  
        {/* Overall Totals */}
        <div className="pt-4 border-t font-medium flex justify-between">
          <span>Search Media Totals:</span>
          <div className="flex space-x-4">
            <span>Media: ${overallTotals.overallMedia.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
            <span>Fees ({feesearch}%): ${overallTotals.overallFee.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
            <span>Total Cost: ${overallTotals.overallCost.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
          </div>
        </div>
      </CardContent>
    </Card>
  </div>
  
      <div>
        {isLoading ? (
          <div className="flex justify-center items-center h-20">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div> //
        ) : (
          <div className="space-y-6">
            <Form {...form}>
              <div className="space-y-6">
                {lineItemFields.map((field, lineItemIndex) => {
                  const getTotals = (lineItemIndex: number) => {
                    const lineItem = form.getValues(`lineItems.${lineItemIndex}`);
                    let totalMedia = 0;
                    let totalCalculatedValue = 0;
                    let fee = 0;
  
                    lineItem.bursts.forEach((burst) => {
                      const budget = parseFloat(burst.budget.replace(/[^0-9.]/g, "")) || 0;
                      totalMedia += budget;
                      totalCalculatedValue += burst.calculatedValue || 0;
                    });
  
                    fee = feesearch ? (totalMedia / (100 - feesearch)) * feesearch : 0;
  
                    return { totalMedia, totalCalculatedValue, fee };
                  };
  
                  const { totalMedia, totalCalculatedValue, fee } = getTotals(lineItemIndex);
  
                  return (
                    <div key={field.id} className="space-y-6">
                    <Card>
                      <CardHeader className="pb-2">
                        <div className="flex justify-between items-center">
                          <div className="flex items-center space-x-2">
                            <CardTitle className="text-lg font-medium">Search Line Item {lineItemIndex + 1}</CardTitle>
                            <div className="text-sm text-muted-foreground">ID: {`${mbaNumber}SL${lineItemIndex + 1}`}</div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className="text-sm font-medium">
                              Total: {new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency: 'USD',
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                              }).format(totalMedia + fee)}
                            </div>
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="sm"
                              onClick={() => {
                                const element = document.getElementById(`line-item-${lineItemIndex}`);
                                if (element) {
                                  element.classList.toggle('hidden');
                                }
                              }}
                            >
                              <ChevronDown className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </CardHeader>
                      
                      {/* Summary Row - Always visible */}
                      <div className="px-6 py-2 border-b">
                        <div className="grid grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="font-medium">Platform:</span> {form.watch(`lineItems.${lineItemIndex}.platform`) || 'Not selected'}
                          </div>
                          <div>
                            <span className="font-medium">Buy Type:</span> {form.watch(`lineItems.${lineItemIndex}.buyType`) || 'Not selected'}
                          </div>
                          <div>
                            <span className="font-medium">Bid Strategy:</span> {form.watch(`lineItems.${lineItemIndex}.bidStrategy`) || 'Not selected'}
                          </div>
                          <div>
                            <span className="font-medium">Bursts:</span> {form.watch(`lineItems.${lineItemIndex}.bursts`, []).length}
                          </div>
                        </div>
                      </div>
                      
                      {/* Detailed Content - Collapsible */}
                      <div id={`line-item-${lineItemIndex}`} className="hidden">
                        <CardContent className="space-y-4 pt-4">
                          <div className="grid grid-cols-3 gap-4">
                            <FormField
                              control={form.control}
                              name={`lineItems.${lineItemIndex}.platform`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Platform</FormLabel>
                                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder="Select platform" />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      {publishers.map((publisher) => (
                                        <SelectItem key={publisher.id} value={publisher.publisher_name}>
                                          {publisher.publisher_name}
                                        </SelectItem>
                                      ))}
                                    </SelectContent>
                                  </Select>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />

                            <FormField
                              control={form.control}
                              name={`lineItems.${lineItemIndex}.bidStrategy`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Bid Strategy</FormLabel>
                                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder="Select bid strategy" />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="target_roas">Target ROAS</SelectItem>
                                      <SelectItem value="manual_cpc">Manual CPC</SelectItem>
                                      <SelectItem value="maximize_conversions">Maximize Conversions</SelectItem>
                                      <SelectItem value="target_cpa">Target CPA</SelectItem>
                                    </SelectContent>
                                  </Select>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />

                            <FormField
                              control={form.control}
                              name={`lineItems.${lineItemIndex}.buyType`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Buy Type</FormLabel>
                                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder="Select buy type" />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="cpc">CPC</SelectItem>
                                      <SelectItem value="cpm">CPM</SelectItem>
                                      <SelectItem value="cpv">CPV</SelectItem>
                                      <SelectItem value="fixed_cost">Fixed Cost</SelectItem>
                                    </SelectContent>
                                  </Select>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </div>

                          <FormField
                            control={form.control}
                            name={`lineItems.${lineItemIndex}.creativeTargeting`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Creative Targeting</FormLabel>
                                <FormControl>
                                  <Textarea {...field} placeholder="Enter creative targeting details" />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <div className="flex space-x-4">
                            <FormField
                              control={form.control}
                              name={`lineItems.${lineItemIndex}.fixedCostMedia`}
                              render={({ field }) => (
                                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                                  <FormControl>
                                    <Checkbox checked={!!field.value} onCheckedChange={field.onChange} />
                                  </FormControl>
                                  <div className="space-y-1 leading-none">
                                    <FormLabel>Fixed Cost Media</FormLabel>
                                  </div>
                                </FormItem>
                              )}
                            />

                            <FormField
                              control={form.control}
                              name={`lineItems.${lineItemIndex}.clientPaysForMedia`}
                              render={({ field }) => (
                                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                                  <FormControl>
                                    <Checkbox checked={field.value} onCheckedChange={field.onChange} />
                                  </FormControl>
                                  <div className="space-y-1 leading-none">
                                    <FormLabel>Client Pays for Media</FormLabel>
                                  </div>
                                </FormItem>
                              )}
                            />
                          </div>

                          {/* Bursts Section */}
                          <div className="space-y-4">
                            <div className="flex justify-between items-center">
                              <h3 className="text-sm font-medium">Bursts</h3>
                              <Button 
                                type="button" 
                                size="sm" 
                                onClick={() => handleAppendBurst(lineItemIndex)}
                              >
                                Add Burst
                              </Button>
                            </div>
                            
                            {form.watch(`lineItems.${lineItemIndex}.bursts`, []).map((burstField, burstIndex) => {
                              return (
                                <Card key={`${lineItemIndex}-${burstIndex}`} className="border border-gray-200">
                                  <CardHeader className="py-2 px-4">
                                    <div className="flex justify-between items-center">
                                      <CardTitle className="text-sm font-medium">Burst {burstIndex + 1}</CardTitle>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => handleRemoveBurst(lineItemIndex, burstIndex)}
                                      >
                                        <Trash2 className="h-4 w-4" />
                                      </Button>
                                    </div>
                                  </CardHeader>
                                  <CardContent className="py-2 px-4">
                                    <div className="grid grid-cols-5 gap-4 items-center">
                                      <FormField
                                        control={form.control}
                                        name={`lineItems.${lineItemIndex}.bursts.${burstIndex}.budget`}
                                        render={({ field }) => (
                                          <FormItem>
                                            <FormLabel className="text-xs">Budget</FormLabel>
                                            <FormControl>
                                              <Input
                                                {...field}
                                                type="text"
                                                className="w-full"
                                                onChange={(e) => {
                                                  const value = e.target.value.replace(/[^0-9.]/g, "");
                                                  field.onChange(value);
                                                  handleValueChange(lineItemIndex, burstIndex);
                                                }}
                                                onBlur={(e) => {
                                                  const value = e.target.value;
                                                  const formattedValue = new Intl.NumberFormat("en-US", {
                                                    style: "currency",
                                                    currency: "USD",
                                                    minimumFractionDigits: 2,
                                                    maximumFractionDigits: 2,
                                                  }).format(Number.parseFloat(value) || 0);
                                                  field.onChange(formattedValue);
                                                  handleValueChange(lineItemIndex, burstIndex);
                                                }}
                                              />
                                            </FormControl>
                                            <FormMessage />
                                          </FormItem>
                                        )}
                                      />

                                      <FormField
                                        control={form.control}
                                        name={`lineItems.${lineItemIndex}.bursts.${burstIndex}.buyAmount`}
                                        render={({ field }) => (
                                          <FormItem>
                                            <FormLabel className="text-xs">Buy Amount</FormLabel>
                                            <FormControl>
                                              <Input
                                                {...field}
                                                type="text"
                                                className="w-full"
                                                onChange={(e) => {
                                                  const value = e.target.value.replace(/[^0-9.]/g, "");
                                                  field.onChange(value);
                                                  handleValueChange(lineItemIndex, burstIndex);
                                                }}
                                                onBlur={(e) => {
                                                  const value = e.target.value;
                                                  const formattedValue = new Intl.NumberFormat("en-US", {
                                                    style: "currency",
                                                    currency: "USD",
                                                    minimumFractionDigits: 2,
                                                    maximumFractionDigits: 2,
                                                  }).format(Number.parseFloat(value) || 0);
                                                  field.onChange(formattedValue);
                                                  handleValueChange(lineItemIndex, burstIndex);
                                                }}
                                              />
                                            </FormControl>
                                            <FormMessage />
                                          </FormItem>
                                        )}
                                      />

                                      <div className="grid grid-cols-2 gap-2">
                                        <FormField
                                          control={form.control}
                                          name={`lineItems.${lineItemIndex}.bursts.${burstIndex}.startDate`}
                                          render={({ field }) => (
                                            <FormItem>
                                              <FormLabel className="text-xs">Start Date</FormLabel>
                                              <Popover>
                                                <PopoverTrigger asChild>
                                                  <FormControl>
                                                    <Button
                                                      variant={"outline"}
                                                      className={cn(
                                                        "w-full pl-2 text-left font-normal text-xs h-8",
                                                        !field.value && "text-muted-foreground",
                                                      )}
                                                    >
                                                      {field.value ? format(field.value, "MM/dd/yy") : <span>Pick date</span>}
                                                      <CalendarIcon className="ml-auto h-3 w-3 opacity-50" />
                                                    </Button>
                                                  </FormControl>
                                                </PopoverTrigger>
                                                <PopoverContent className="w-auto p-0" align="start">
                                                  <Calendar
                                                    mode="single"
                                                    selected={field.value}
                                                    onSelect={field.onChange}
                                                    disabled={(date) =>
                                                      date < new Date() || date > new Date("2100-01-01")
                                                    }
                                                    initialFocus
                                                  />
                                                </PopoverContent>
                                              </Popover>
                                              <FormMessage />
                                            </FormItem>
                                          )}
                                        />

                                        <FormField
                                          control={form.control}
                                          name={`lineItems.${lineItemIndex}.bursts.${burstIndex}.endDate`}
                                          render={({ field }) => (
                                            <FormItem>
                                              <FormLabel className="text-xs">End Date</FormLabel>
                                              <Popover>
                                                <PopoverTrigger asChild>
                                                  <FormControl>
                                                    <Button
                                                      variant={"outline"}
                                                      className={cn(
                                                        "w-full pl-2 text-left font-normal text-xs h-8",
                                                        !field.value && "text-muted-foreground",
                                                      )}
                                                    >
                                                      {field.value ? format(field.value, "MM/dd/yy") : <span>Pick date</span>}
                                                      <CalendarIcon className="ml-auto h-3 w-3 opacity-50" />
                                                    </Button>
                                                  </FormControl>
                                                </PopoverTrigger>
                                                <PopoverContent className="w-auto p-0" align="start">
                                                  <Calendar
                                                    mode="single"
                                                    selected={field.value}
                                                    onSelect={field.onChange}
                                                    disabled={(date) =>
                                                      date < new Date() || date > new Date("2100-01-01")
                                                    }
                                                    initialFocus
                                                  />
                                                </PopoverContent>
                                              </Popover>
                                              <FormMessage />
                                            </FormItem>
                                          )}
                                        />
                                      </div>

                                      <FormField
                                        control={form.control}
                                        name={`lineItems.${lineItemIndex}.bursts.${burstIndex}.calculatedValue`}
                                        render={({ field }) => {
                                          const buyType = useWatch({
                                            control: form.control,
                                            name: `lineItems.${lineItemIndex}.buyType`,
                                          });

                                          const calculatedValue = useMemo(() => {
                                            const budget = parseFloat(form.getValues(`lineItems.${lineItemIndex}.bursts.${burstIndex}.budget`)?.replace(/[^0-9.]/g, "") || "0");
                                            const buyAmount = parseFloat(form.getValues(`lineItems.${lineItemIndex}.bursts.${burstIndex}.buyAmount`)?.replace(/[^0-9.]/g, "") || "1");

                                            switch (buyType) {
                                              case "cpc":
                                              case "cpv":
                                                return buyAmount !== 0 ? (budget / buyAmount) : "0";
                                              case "cpm":
                                                return buyAmount !== 0 ? ((budget / buyAmount) * 1000) : "0";
                                              case "fixed_cost":
                                                return "1";
                                              default:
                                                return "0";
                                            }
                                          }, [
                                            form.getValues(`lineItems.${lineItemIndex}.bursts.${burstIndex}.budget`),
                                            form.getValues(`lineItems.${lineItemIndex}.bursts.${burstIndex}.buyAmount`),
                                            buyType
                                          ]);

                                          let title = "Calculated Value";
                                          switch (buyType) {
                                            case "cpc":
                                              title = "Clicks";
                                              break;
                                            case "cpv":
                                              title = "Views";
                                              break;
                                            case "cpm":
                                              title = "Impressions";
                                              break;
                                            case "fixed_cost":
                                              title = "Fixed Cost";
                                              break;
                                          }

                                          return (
                                            <FormItem>
                                              <FormLabel className="text-xs">{title}</FormLabel>
                                              <FormControl>
                                                <Input
                                                  type="text"
                                                  className="w-full"
                                                  value={calculatedValue.toLocaleString(undefined, { maximumFractionDigits: 0 })}
                                                  readOnly
                                                />
                                              </FormControl>
                                            </FormItem>
                                          );
                                        }}
                                      />
                                    </div>
                                  </CardContent>
                                </Card>
                              );
                            })}
                          </div>
                        </CardContent>
                      </div>
                      
                      <CardFooter className="flex justify-end space-x-2 pt-2">
                        {lineItemIndex === lineItemFields.length - 1 && (
                          <Button
                            type="button"
                            onClick={() =>
                              appendLineItem({
                                platform: "",
                                bidStrategy: "",
                                buyType: "",
                                creativeTargeting: "",
                                fixedCostMedia: false,
                                clientPaysForMedia: false,
                                bursts: [
                                  {
                                    budget: "",
                                    buyAmount: "",
                                    startDate: new Date(),
                                    endDate: new Date(),
                                    calculatedValue: 0,
                                  },
                                ],
                              })
                            }
                          >
                            Add Line Item
                          </Button>
                        )}
                        <Button type="button" variant="destructive" onClick={() => removeLineItem(lineItemIndex)}>
                          Remove Line Item
                        </Button>
                      </CardFooter>
                    </Card>
                  </div>
                )
              })}
            </div>
          </Form>
        </div>
      )}
    </div>
  </div>)}
