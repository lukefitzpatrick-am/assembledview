"use client"

import { useState, useEffect, lazy, Suspense } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { format } from "date-fns"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Switch } from "@/components/ui/switch"
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { CalendarIcon } from "lucide-react"
import { cn } from "@/lib/utils"
import { useMediaPlanContext } from "@/contexts/MediaPlanContext"
import { getSearchBursts } from "@/components/media-containers/SearchContainer"
import { getSocialMediaBursts } from "@/components/media-containers/SocialMediaContainer";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { toast } from "@/components/ui/use-toast"
import { useRouter } from "next/navigation"
import { OutcomeModal } from "@/components/OutcomeModal"
import { Table, TableBody, TableCell, TableHeader, TableRow, TableHead } from "@/components/ui/table"

const CARBONE_TEMPLATE_ID = "6e2f3832fdf95264f33fb862c5e132a6095e3a0ecb1e259bfc0fc4a4f7e2c7c3";

const mediaPlanSchema = z.object({
  mp_clientname: z.string().min(1, "Client name is required"),
  mp_campaignstatus: z.string().min(1, "Campaign status is required"),
  mp_campaignname: z.string().min(1, "Campaign name is required"),
  mp_campaigndates_start: z.date(),
  mp_campaigndates_end: z.date(),
  mp_brand: z.string(),
  mp_clientcontact: z.string().min(1, "Client contact is required"),
  mp_ponumber: z.string(),
  mp_campaignbudget: z.number(),
  mbaidentifier: z.string(),
  mbanumber: z.string(),
  mp_television: z.boolean(),
  mp_radio: z.boolean(),
  mp_newspaper: z.boolean(),
  mp_magazines: z.boolean(),
  mp_ooh: z.boolean(),
  mp_cinema: z.boolean(),
  mp_digidisplay: z.boolean(),
  mp_digiaudio: z.boolean(),
  mp_digivideo: z.boolean(),
  mp_bvod: z.boolean(),
  mp_integration: z.boolean(),
  mp_search: z.boolean(),
  mp_socialmedia: z.boolean(),
  mp_progdisplay: z.boolean(),
  mp_progvideo: z.boolean(),
  mp_progbvod: z.boolean(),
  mp_progaudio: z.boolean(),
  mp_progooh: z.boolean(),
  mp_influencers: z.boolean(),
  mp_fixedfee: z.boolean(),
  lineItems: z.array(
    z.object({
      bursts: z.array(
        z.object({
          startDate: z.string(),
          endDate: z.string(),
          budget: z.string(),
        })
      ),
    })
  ),
})

type MediaPlanFormValues = z.infer<typeof mediaPlanSchema>

interface Client {
  id: number
  clientname_input: string
  mbaidentifier: string
  feesearch: number
  feesocial: number
  feeprogdisplay: number
  feeprogvideo: number
  feeprogbvod: number
  feeprogaudio: number
  feeprogooh: number
  feecontentcreator: number
  adservvideo: number
  adservimp: number
  adservdisplay: number
  adservaudio: number
}

// Lazy-loaded components for each media type
const TelevisionContainer = lazy(() => import("@/components/media-containers/TelevisionContainer"))
const RadioContainer = lazy(() => import("@/components/media-containers/RadioContainer"))
const NewspaperContainer = lazy(() => import("@/components/media-containers/NewspaperContainer"))
const MagazinesContainer = lazy(() => import("@/components/media-containers/MagazinesContainer"))
const OOHContainer = lazy(() => import("@/components/media-containers/OOHContainer"))
const CinemaContainer = lazy(() => import("@/components/media-containers/CinemaContainer"))
const DigitalDisplayContainer = lazy(() => import("@/components/media-containers/DigitalDisplayContainer"))
const DigitalAudioContainer = lazy(() => import("@/components/media-containers/DigitalAudioContainer"))
const DigitalVideoContainer = lazy(() => import("@/components/media-containers/DigitalVideoContainer"))
const BVODContainer = lazy(() => import("@/components/media-containers/BVODContainer"))
const IntegrationContainer = lazy(() => import("@/components/media-containers/IntegrationContainer"))
const SearchContainer = lazy(() => import("@/components/media-containers/SearchContainer"))
const SocialMediaContainer = lazy(() => import("@/components/media-containers/SocialMediaContainer"))
const ProgDisplayContainer = lazy(() => import("@/components/media-containers/ProgDisplayContainer"))
const ProgVideoContainer = lazy(() => import("@/components/media-containers/ProgVideoContainer"))
const ProgBVODContainer = lazy(() => import("@/components/media-containers/ProgBVODContainer"))
const ProgAudioContainer = lazy(() => import("@/components/media-containers/ProgAudioContainer"))
const ProgOOHContainer = lazy(() => import("@/components/media-containers/ProgOOHContainer"))
const InfluencersContainer = lazy(() => import("@/components/media-containers/InfluencersContainer"))
const ConsultingContainer = lazy(() => import("@/components/media-containers/ConsultingContainer"))

export default function CreateMediaPlan() {
  const [clients, setClients] = useState<Client[]>([])
  const [reportId, setReportId] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [selectedClientId, setSelectedClientId] = useState<string>("") // Added state for selectedClientId
  const [feesearch, setFeeSearch] = useState<number | null>(null); // ✅ Renamed from clientFee to searchFee
  const [feesocial, setFeeSocial] = useState<number | null>(null);
  const [feeprogdisplay, setFeeProgDisplay] = useState<number | null>(null);
  const [feeprogvideo, setFeeProgVideo] = useState<number | null>(null);
  const [feeprogbvod, setFeeProgBvod] = useState<number | null>(null);
  const [feeprogaudio, setFeeProgAudio] = useState<number | null>(null);
  const [feeprogooh, setFeeProgOoh] = useState<number | null>(null);
  const [feecontentcreator, setFeeContentCreator] = useState<number | null>(null);
  const [adservvideo, setAdServVideo] = useState<number | null>(null);
  const [adservimp, setAdServImp] = useState<number | null>(null);
  const [adservdisplay, setAdServDisplay] = useState<number | null>(null);
  const [adservaudio, setAdServAudio] = useState<number | null>(null);
  const [searchTotal, setSearchTotal] = useState(0);
  const [socialmediaTotal, setSocialMediaTotal] = useState<number>(0)
  const { setMbaNumber } = useMediaPlanContext()
  const [billingTotal, setBillingTotal] = useState("$0.00"); // ✅ New state for total billing amount
  const [billingMonths, setBillingMonths] = useState<{
    monthYear: string;
    assembledFee: string;
    adservingTechFees: string;
    production: string;
    mediaCosts: Record<string, string>;
  }[]>([]);
  const [burstsData, setBurstsData] = useState([]);
  const [investmentPerMonth, setInvestmentPerMonth] = useState([]);
  const [searchBursts, setSearchBursts] = useState([]);
  const [socialMediaBursts, setSocialMediaBursts] = useState([]);
  const [isManualBilling, setIsManualBilling] = useState(false);
  const [isManualBillingModalOpen, setIsManualBillingModalOpen] = useState(false);
  const [manualBillingMonths, setManualBillingMonths] = useState<{
    monthYear: string;
    assembledFee: string;
    adservingTechFees: string;
    production: string;
    mediaCosts: Record<string, string>;
  }[]>([]);
  const [manualBillingTotal, setManualBillingTotal] = useState("$0.00");
  const [modalOpen, setModalOpen] = useState(false);
  const [modalTitle, setModalTitle] = useState("");
  const [modalOutcome, setModalOutcome] = useState("");
  const [modalLoading, setModalLoading] = useState(false);

  const form = useForm<MediaPlanFormValues>({
    resolver: zodResolver(mediaPlanSchema),
    defaultValues: {
      mp_clientname: "",
      mp_campaignstatus: "",
      mp_campaignname: "",
      mp_campaigndates_start: new Date(),
      mp_campaigndates_end: new Date(),
      mp_brand: "",
      mp_clientcontact: "",
      mp_ponumber: "",
      mp_campaignbudget: 0,
      mbaidentifier: "",
      mbanumber: "",
      mp_television: false,
      mp_radio: false,
      mp_newspaper: false,
      mp_magazines: false,
      mp_ooh: false,
      mp_cinema: false,
      mp_digidisplay: false,
      mp_digiaudio: false,
      mp_digivideo: false,
      mp_bvod: false,
      mp_integration: false,
      mp_search: false,
      mp_socialmedia: false,
      mp_progdisplay: false,
      mp_progvideo: false,
      mp_progbvod: false,
      mp_progaudio: false,
      mp_progooh: false,
      mp_influencers: false,
      mp_fixedfee: false,
    },
  })

  const [searchFeeTotal, setSearchFeeTotal] = useState(0);

  const handleSearchTotalChange = (totalMedia: number, totalFee: number) => {
    setSearchTotal(totalMedia);
    setSearchFeeTotal(totalFee); // ✅ Store the actual calculated fee
  };
  
const [socialMediaFeeTotal, setSocialMediaFeeTotal] = useState(0);

const handleSocialMediaTotalChange = (totalMedia: number, totalFee: number) => {
  setSocialMediaTotal(totalMedia);
  setSocialMediaFeeTotal(totalFee); // ✅ Store the actual calculated fee
};

const [grossMediaTotal, setGrossMediaTotal] = useState(0);

useEffect(() => {
  setGrossMediaTotal(calculateGrossMediaTotal());
}, [searchTotal, socialmediaTotal]);

const [totalInvestment, setTotalInvestment] = useState(0);

useEffect(() => {
  const newGrossMediaTotal = calculateGrossMediaTotal();
  setGrossMediaTotal(newGrossMediaTotal);

  const newTotalInvestment = newGrossMediaTotal + calculateAssembledFee();
  setTotalInvestment(newTotalInvestment); // ✅ Ensures total investment updates dynamically
}, [searchTotal, socialmediaTotal, searchFeeTotal, socialMediaFeeTotal]);


useEffect(() => {
  calculateBillingSchedule();
}, []); // ✅ Run at mount to initialize with default start & end dates

useEffect(() => {
  if (form.watch("mp_campaigndates_start") && form.watch("mp_campaigndates_end")) {
    calculateBillingSchedule();
  }
}, [
  form.watch("mp_campaigndates_start"),
  form.watch("mp_campaigndates_end"),
  searchBursts,
  socialMediaBursts,
  searchFeeTotal,
  socialMediaFeeTotal,
  searchTotal,
  socialmediaTotal
]);
  
// Calculate and distribute burst budgets into monthly billing amounts
const calculateBillingSchedule = () => {
  const startDate = form.watch("mp_campaigndates_start");
  const endDate = form.watch("mp_campaigndates_end");

  if (!startDate || !endDate) return;

  let billingMonthsMap: Record<string, number> = {};

  // Initialize all months in the campaign period
  let current = new Date(startDate);
  while (current <= new Date(endDate)) {
    const monthYear = `${current.toLocaleString("default", { month: "long" })} ${current.getFullYear()}`;
    billingMonthsMap[monthYear] = 0;
    current.setMonth(current.getMonth() + 1);
    current.setDate(1);
  }

  // Process all bursts (search and social media)
  const allBursts = [...searchBursts, ...socialMediaBursts];
  
  allBursts.forEach(burst => {
    const burstStart = new Date(burst.startDate);
    const burstEnd = new Date(burst.endDate);
    
    // Calculate total days in burst
    const totalDays = Math.ceil((burstEnd.getTime() - burstStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;
    
    // Calculate daily budget (media + fee)
    const dailyBudget = burst.budget / totalDays;

    let current = new Date(burstStart);
    while (current <= burstEnd) {
      const monthYear = `${current.toLocaleString("default", { month: "long" })} ${current.getFullYear()}`;

      // Calculate the first and last day of the current month
      const firstDayOfMonth = new Date(current.getFullYear(), current.getMonth(), 1);
      const lastDayOfMonth = new Date(current.getFullYear(), current.getMonth() + 1, 0);

      // Calculate the actual start and end dates for this month's portion of the burst
      const monthStart = new Date(Math.max(burstStart.getTime(), firstDayOfMonth.getTime()));
      const monthEnd = new Date(Math.min(burstEnd.getTime(), lastDayOfMonth.getTime()));

      // Calculate the number of days in this month that overlap with the burst
      const daysInThisMonth = Math.ceil((monthEnd.getTime() - monthStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;

      // Calculate monthly allocation
      const monthlyAllocation = dailyBudget * daysInThisMonth;
      billingMonthsMap[monthYear] = (billingMonthsMap[monthYear] || 0) + monthlyAllocation;

      // Move to the next month
      current.setMonth(current.getMonth() + 1);
      current.setDate(1);
    }
  });

  // Convert to array format with the new structure
  const updatedBillingMonths = Object.entries(billingMonthsMap).map(([monthYear, amount]) => {
    // Calculate the total amount for this month
    const totalAmount = amount;
    
    // Calculate the media portion (80% of total)
    const mediaAmount = totalAmount * 0.8;
    
    // Calculate the fee portion (20% of total)
    const feeAmount = totalAmount * 0.2;
    
    // Split the fee portion
    const assembledFee = feeAmount * 0.5; // 50% of fees
    const adservingTechFees = feeAmount * 0.25; // 25% of fees
    const production = feeAmount * 0.25; // 25% of fees
    
    // Split the media portion between search and social media if both are enabled
    let searchAmount = 0;
    let socialMediaAmount = 0;
    
    if (form.watch("mp_search") && form.watch("mp_socialmedia")) {
      // If both are enabled, split 50/50
      searchAmount = mediaAmount * 0.5;
      socialMediaAmount = mediaAmount * 0.5;
    } else if (form.watch("mp_search")) {
      // If only search is enabled
      searchAmount = mediaAmount;
      socialMediaAmount = 0;
    } else if (form.watch("mp_socialmedia")) {
      // If only social media is enabled
      searchAmount = 0;
      socialMediaAmount = mediaAmount;
    }
    
    return {
      monthYear,
      assembledFee: `$${assembledFee.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      adservingTechFees: `$${adservingTechFees.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      production: `$${production.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      mediaCosts: {
        search: form.watch("mp_search") ? `$${searchAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : "$0.00",
        socialMedia: form.watch("mp_socialmedia") ? `$${socialMediaAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : "$0.00"
      }
    };
  });

  setBillingMonths(updatedBillingMonths);
  setManualBillingMonths(updatedBillingMonths);

  // Calculate total billing
  const totalAmount = Object.values(billingMonthsMap).reduce((sum, value) => sum + value, 0);
  setBillingTotal(`$${totalAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`);
};

const handleGenerateMBA = async () => {
  setIsLoading(true);
  setModalOpen(true);
  setModalTitle("Generating MBA");
  setModalLoading(true);
  setModalOutcome("Generating MBA document...");
  
  try {
    // Get form values
    const formValues = form.getValues();
    
    // Prepare data for the API
    const mbaData = {
      clientName: formValues.mp_clientname,
      campaignName: formValues.mp_campaignname,
      campaignDates: `${formValues.mp_campaigndates_start} - ${formValues.mp_campaigndates_end}`,
      brand: formValues.mp_brand,
      clientContact: formValues.mp_clientcontact,
      poNumber: formValues.mp_ponumber,
      campaignBudget: formValues.mp_campaignbudget,
      mbaIdentifier: formValues.mbaidentifier,
      mbaNumber: formValues.mbanumber,
      // Add other relevant data for the MBA
    };

    // Send data to API
    const response = await fetch("/api/mba/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(mbaData),
    });

    if (!response.ok) {
      // Try to get error message from response
      let errorMessage = "Failed to generate MBA";
      try {
        const errorData = await response.json();
        if (errorData && errorData.error) {
          errorMessage = errorData.error;
        }
      } catch (e) {
        // If we can't parse the error JSON, just use the default message
        console.error("Could not parse error response:", e);
      }
      throw new Error(errorMessage);
    }

    // Get the PDF blob
    const pdfBlob = await response.blob();
    
    // Create a URL for the blob
    const url = window.URL.createObjectURL(pdfBlob);
    
    // Create a temporary link element
    const link = document.createElement("a");
    link.href = url;
    link.download = `MBA_${formValues.mp_clientname}_${formValues.mp_campaignname}.pdf`;
    
    // Append to the document, click it, and remove it
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Revoke the URL to free up memory
    window.URL.revokeObjectURL(url);
    
    setModalOutcome(`MBA generated successfully!\n\nClient: ${formValues.mp_clientname}\nCampaign: ${formValues.mp_campaignname}\nMBA Identifier: ${formValues.mbaidentifier}\n\nDownloading MBA document...`);
    setModalLoading(false);
    
    // Show success message
    toast({
      title: "Success",
      description: "MBA generated successfully",
      variant: "default",
    });
  } catch (error) {
    console.error("Error generating MBA:", error);
    setModalOutcome(`Error generating MBA: ${error instanceof Error ? error.message : "Unknown error"}`);
    setModalLoading(false);
    
    toast({
      title: "Error",
      description: error instanceof Error ? error.message : "Failed to generate MBA",
      variant: "destructive",
    });
  } finally {
    setIsLoading(false);
  }
};

  // Calculate the total for each media type
const calculateMediaTotal = (mediaName) => {
  switch (mediaName) {
    case "mp_search":
      return searchTotal ?? 0;
    case "mp_socialmedia":
      return socialmediaTotal ?? 0;
    case "mp_progdisplay":
      return feeprogdisplay ?? 0;
    case "mp_progvideo":
      return feeprogvideo ?? 0;
    case "mp_progbvod":
      return feeprogbvod ?? 0;
    case "mp_progaudio":
      return feeprogaudio ?? 0;
    case "mp_progooh":
      return feeprogooh ?? 0;
    case "mp_influencers":
      return feecontentcreator ?? 0;
    default:
      return 0;
  }
};

const calculateGrossMediaTotal = () => {
  return (
    (searchTotal ?? 0) +
    (socialmediaTotal ?? 0)
  );
};


// Calculate the Assembled Fee (sum of all fees)
const calculateAssembledFee = () => {
  return (
    (searchFeeTotal ?? 0) +
    (socialMediaFeeTotal ?? 0) 
  );
};

const calculateTotalInvestment = () => {
  return grossMediaTotal + calculateAssembledFee();
};

// Calculate Ad Serving Fees
const calculateAdServingFees = () => {
  return (
    (adservvideo ?? 0) +
    (adservimp ?? 0) +
    (adservdisplay ?? 0) +
    (adservaudio ?? 0)
  );
};

// Calculate Production Costs (assuming content creator fees count as production)
const calculateProductionCosts = () => {
  return feecontentcreator ?? 0;
};

  function BillingAndMBASections({ form }) {
    const [billingMonths, setBillingMonths] = useState<{ monthYear: string; amount: string }[]>([]);
  
    useEffect(() => {
      const startDate = form.watch('mp_campaigndates_start');
      const endDate = form.watch('mp_campaigndates_end');
      if (startDate && endDate) {
        const months = [];
        let current = new Date(startDate);
        const end = new Date(endDate);
        // Generate all months, including partial ones
    while (current <= end) {
      const monthYear = format(current, 'MMMM yyyy');
      months.push({ monthYear, amount: '' });

      // Move to the next month
      current.setMonth(current.getMonth() + 1);
      current.setDate(1); // Ensure we start at the beginning of the month
    }
        setBillingMonths(months);
      }
    }, [form]);
  
    const handleAmountChange = (index, value) => {
      const updatedMonths = [...billingMonths];
      updatedMonths[index].amount = value;
      setBillingMonths(updatedMonths);
    };
  
    // ✅ Added the missing return statement here
    return (
      <div className="flex flex-col space-y-4">
        {billingMonths.map((month, index) => (
          <div key={index} className="flex items-center justify-between">
            <span className="text-sm font-medium">{month.monthYear}</span>
            <input
              type="text"
              className="border border-gray-300 rounded px-3 py-2"
              placeholder="$0.00"
              value={month.amount}
              onChange={(e) => handleAmountChange(index, e.target.value)}
            />
          </div>
        ))}
      </div>
    );
  }
  
  

    useEffect(() => {
      fetchClients()
    }, [])  

  async function fetchClients() {
    try {
      const response = await fetch("/api/clients")
      if (!response.ok) {
        throw new Error("Failed to fetch clients")
      }
      const data = await response.json()
      setClients(data)
    } catch (error) {
      console.error("Error fetching clients:", error)
    }
  }

  async function onSubmit(data: MediaPlanFormValues) {
    setIsLoading(true)
    try {
      // First, save the media plan
      const response = await fetch("/api/mediaplans", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      })

      if (!response.ok) {
        throw new Error("Failed to create media plan")
      }

      const mediaPlanData = await response.json()
      const mbaNumber = mediaPlanData.mbanumber || data.mbanumber
      
      // Then, save search data if search is enabled
      if (data.mp_search && mbaNumber) {
        try {
          // @ts-ignore - Accessing the saveSearchData function from the window object
          if (window.saveSearchData) {
            // @ts-ignore - Calling the saveSearchData function
            await window.saveSearchData(mbaNumber)
            console.log("Search data saved successfully")
          } else {
            console.warn("saveSearchData function not found")
          }
        } catch (error) {
          console.error("Failed to save search data:", error)
          // Continue with the media plan creation even if search data saving fails
        }
      }

      // Handle successful creation
      console.log("Media plan created successfully")
      toast({
        title: "Success",
        description: "Media plan created successfully",
      })
      
      // Redirect to the edit page
      router.push(`/mediaplans/${mediaPlanData.id}/edit`)
    } catch (error) {
      console.error("Failed to create media plan:", error)
      toast({
        title: "Error",
        description: error.message || "Failed to create media plan",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const generateMBANumber = async (mbaidentifier: string) => {
    try {
      const response = await fetch(`/api/mediaplans/mbanumber?mbaidentifier=${mbaidentifier}`)
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "Failed to generate MBA number")
      }
      const data = await response.json()
      if (data.mbanumber) {
        form.setValue("mbanumber", data.mbanumber)
        setMbaNumber(data.mbanumber)
      } else {
        throw new Error("MBA number not found in response")
      }
    } catch (error) {
      console.error("Error generating MBA number:", error)
      form.setValue("mbanumber", "Error generating MBA number")
      setMbaNumber("")
    }
  }



  const handleClientChange = (clientId: string) => {
    const selectedClient = clients.find((client) => client.id.toString() === clientId)
    if (selectedClient) {
      form.setValue("mp_clientname", selectedClient.clientname_input)
      form.setValue("mbaidentifier", selectedClient.mbaidentifier)
      generateMBANumber(selectedClient.mbaidentifier)
      setSelectedClientId(clientId)
      setFeeSearch(selectedClient.feesearch);
      console.log("Updated feesearch:", selectedClient.feesearch); // ✅ Debugging log
      setFeeSocial(selectedClient.feesocial);
      setFeeProgDisplay(selectedClient.feeprogdisplay);
      setFeeProgVideo(selectedClient.feeprogvideo);
      setFeeProgBvod(selectedClient.feeprogbvod);
      setFeeProgAudio(selectedClient.feeprogaudio);
      setFeeProgOoh(selectedClient.feeprogooh);
      setFeeContentCreator(selectedClient.feecontentcreator);
      setAdServVideo(selectedClient.adservvideo);
      setAdServImp(selectedClient.adservimp);
      setAdServDisplay(selectedClient.adservdisplay);
      setAdServAudio(selectedClient.adservaudio);
    } else {
      form.setValue("mp_clientname", "")
      form.setValue("mbaidentifier", "")
      form.setValue("mbanumber", "")
      setSelectedClientId("")

      setFeeSearch(null);
      setFeeSocial(null);
      setFeeProgDisplay(null);
      setFeeProgVideo(null);
      setFeeProgBvod(null);
      setFeeProgAudio(null);
      setFeeProgOoh(null);
      setFeeContentCreator(null);
      setAdServVideo(null);
      setAdServImp(null);
      setAdServDisplay(null);
      setAdServAudio(null);
    }
  }

  useEffect(() => {
    console.log("CreateMediaPlan: selectedClientId changed to", selectedClientId)
  }, [selectedClientId])

  const mediaTypes = [
    { name: "mp_fixedfee", label: "Fixed Fee", component: null },
    { name: "mp_consulting", label: "Consulting", component: ConsultingContainer },
    { name: "mp_television", label: "Television", component: TelevisionContainer },
    { name: "mp_radio", label: "Radio", component: RadioContainer },
    { name: "mp_newspaper", label: "Newspaper", component: NewspaperContainer },
    { name: "mp_magazines", label: "Magazines", component: MagazinesContainer },
    { name: "mp_ooh", label: "OOH", component: OOHContainer },
    { name: "mp_cinema", label: "Cinema", component: CinemaContainer },
    { name: "mp_digidisplay", label: "Digital Display", component: DigitalDisplayContainer },
    { name: "mp_digiaudio", label: "Digital Audio", component: DigitalAudioContainer },
    { name: "mp_digivideo", label: "Digital Video", component: DigitalVideoContainer },
    { name: "mp_bvod", label: "BVOD", component: BVODContainer },
    { name: "mp_integration", label: "Integration", component: IntegrationContainer },
    { name: "mp_search", label: "Search", component: SearchContainer },
    { name: "mp_socialmedia", label: "Social Media", component: SocialMediaContainer },
    { name: "mp_progdisplay", label: "Prog Display", component: ProgDisplayContainer },
    { name: "mp_progvideo", label: "Prog Video", component: ProgVideoContainer },
    { name: "mp_progbvod", label: "Prog BVOD", component: ProgBVODContainer },
    { name: "mp_progaudio", label: "Prog Audio", component: ProgAudioContainer },
    { name: "mp_progooh", label: "Prog OOH", component: ProgOOHContainer },
    { name: "mp_influencers", label: "Influencers", component: InfluencersContainer },
  ]
  

  const handleSearchBurstsChange = (bursts) => {
    setSearchBursts(bursts);
  };

  const handleSocialMediaBurstsChange = (bursts) => {
    setSocialMediaBursts(bursts);
  };

  const handleInvestmentChange = (investmentByMonth) => {
    setInvestmentPerMonth(investmentByMonth);
  };

  // Handle manual billing amount changes
  const handleManualBillingChange = (index: number, field: string, value: string) => {
    const updatedMonths = [...manualBillingMonths];
    // Remove any non-numeric characters except decimal point
    const numericValue = value.replace(/[^0-9.]/g, "");
    // Format as currency with commas and two decimal places
    const formattedValue = new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(parseFloat(numericValue) || 0);
    
    if (field === 'assembledFee' || field === 'adservingTechFees' || field === 'production') {
      updatedMonths[index] = { ...updatedMonths[index], [field]: formattedValue };
    } else {
      // Handle media type costs
      updatedMonths[index] = {
        ...updatedMonths[index],
        mediaCosts: {
          ...updatedMonths[index].mediaCosts,
          [field]: formattedValue
        }
      };
    }
    
    setManualBillingMonths(updatedMonths);

    // Calculate new total
    const total = updatedMonths.reduce((sum, month) => {
      let monthTotal = 0;
      
      // Add fixed fees
      monthTotal += parseFloat(month.assembledFee.replace(/[^0-9.]/g, "")) || 0;
      monthTotal += parseFloat(month.adservingTechFees.replace(/[^0-9.]/g, "")) || 0;
      monthTotal += parseFloat(month.production.replace(/[^0-9.]/g, "")) || 0;
      
      // Add media costs
      Object.values(month.mediaCosts).forEach(cost => {
        monthTotal += parseFloat(cost.replace(/[^0-9.]/g, "")) || 0;
      });
      
      return sum + monthTotal;
    }, 0);
    
    setManualBillingTotal(new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(total));
  };

  // Handle manual billing save
  const handleManualBillingSave = () => {
    const total = parseFloat(manualBillingTotal.replace(/[^0-9.]/g, ""));
    const campaignTotal = parseFloat(form.getValues("mp_campaignbudget").toString());

    if (Math.abs(total - campaignTotal) > 0.01) { // Allow for small floating point differences
      toast({
        title: "Error",
        description: "Manual billing total must match campaign budget exactly",
        variant: "destructive",
      });
      return;
    }

    setBillingMonths(manualBillingMonths);
    setBillingTotal(manualBillingTotal);
    setIsManualBilling(true);
    setIsManualBillingModalOpen(false);
  };

  // Handle reset to automatic billing
  const handleResetBilling = () => {
    setIsManualBilling(false);
    calculateBillingSchedule();
  };

  const router = useRouter();

  const handleSaveCampaign = async () => {
    setIsLoading(true);
    setModalOpen(true);
    setModalTitle("Saving Media Plan");
    setModalLoading(true);
    setModalOutcome("Saving media plan to database...");
    
    try {
      // Get form values
      const formValues = form.getValues();
      
      // Prepare data for the API
      const mediaPlanData = {
        mp_clientname: formValues.mp_clientname,
        mp_campaignstatus: "Draft",
        mp_campaignname: formValues.mp_campaignname,
        mp_campaigndates_start: formValues.mp_campaigndates_start,
        mp_campaigndates_end: formValues.mp_campaigndates_end,
        mp_brand: formValues.mp_brand,
        mp_clientcontact: formValues.mp_clientcontact,
        mp_ponumber: formValues.mp_ponumber,
        mp_campaignbudget: formValues.mp_campaignbudget,
        mbaidentifier: formValues.mbaidentifier,
        mbanumber: formValues.mbanumber,
        mp_fixedfee: formValues.mp_fixedfee || false,
        mp_television: formValues.mp_television || false,
        mp_radio: formValues.mp_radio || false,
        mp_newspaper: formValues.mp_newspaper || false,
        mp_magazines: formValues.mp_magazines || false,
        mp_ooh: formValues.mp_ooh || false,
        mp_cinema: formValues.mp_cinema || false,
        mp_digidisplay: formValues.mp_digidisplay || false,
        mp_digiaudio: formValues.mp_digiaudio || false,
        mp_digivideo: formValues.mp_digivideo || false,
        mp_bvod: formValues.mp_bvod || false,
        mp_integration: formValues.mp_integration || false,
        mp_search: formValues.mp_search || false,
        mp_socialmedia: formValues.mp_socialmedia || false,
        mp_progdisplay: formValues.mp_progdisplay || false,
        mp_progvideo: formValues.mp_progvideo || false,
        mp_progbvod: formValues.mp_progbvod || false,
        mp_progaudio: formValues.mp_progaudio || false,
        mp_progooh: formValues.mp_progooh || false,
        mp_influencers: formValues.mp_influencers || false
      };

      // Send data to API
      const response = await fetch("/api/mediaplans", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(mediaPlanData),
      });

      if (!response.ok) {
        // Try to get error message from response
        let errorMessage = "Failed to save media plan";
        try {
          const errorData = await response.json();
          if (errorData && errorData.error) {
            errorMessage = errorData.error;
          }
        } catch (e) {
          // If we can't parse the error JSON, just use the default message
          console.error("Could not parse error response:", e);
        }
        throw new Error(errorMessage);
      }

      // Only try to parse the response as JSON if it was successful
      const result = await response.json();
      console.log("Media plan saved successfully:", result);
      
      setModalOutcome(`Media plan saved successfully!\n\nClient: ${formValues.mp_clientname}\nCampaign: ${formValues.mp_campaignname}\nStatus: Draft\n\nRedirecting to media plans list...`);
      setModalLoading(false);
      
      // Redirect to the media plans list page after a delay
      setTimeout(() => {
        router.push("/mediaplans");
      }, 2000);
    } catch (error) {
      console.error("Error saving media plan:", error);
      setModalOutcome(`Error saving media plan: ${error instanceof Error ? error.message : "Unknown error"}`);
      setModalLoading(false);
      
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to save media plan",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSaveAndGenerateAll = async () => {
    setIsLoading(true);
    setModalOpen(true);
    setModalTitle("Save & Generate All");
    setModalLoading(true);
    setModalOutcome("Saving media plan and generating MBA...");
    
    try {
      // First save the media plan
      await handleSaveCampaign();
      
      // Then generate the MBA
      await handleGenerateMBA();
      
      setModalOutcome(`All operations completed successfully!\n\nMedia plan saved and MBA generated.`);
      setModalLoading(false);
      
      // Show success message
      toast({
        title: "Success",
        description: "Media plan saved and MBA generated successfully",
        variant: "default",
      });
    } catch (error) {
      console.error("Error in save and generate all:", error);
      setModalOutcome(`Error in save and generate all: ${error instanceof Error ? error.message : "Unknown error"}`);
      setModalLoading(false);
      
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to complete all operations",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownloadMediaPlan = async () => {
    setIsLoading(true);
    setModalOpen(true);
    setModalTitle("Downloading Media Plan");
    setModalLoading(true);
    setModalOutcome("Generating media plan PDF...");
    
    try {
      // Get form values
      const formValues = form.getValues();
      
      // Prepare data for the API
      const mediaPlanData = {
        mp_clientname: formValues.mp_clientname,
        mp_campaignname: formValues.mp_campaignname,
        mp_campaigndates_start: formValues.mp_campaigndates_start,
        mp_campaigndates_end: formValues.mp_campaigndates_end,
        mp_brand: formValues.mp_brand,
        mp_clientcontact: formValues.mp_clientcontact,
        mp_ponumber: formValues.mp_ponumber,
        mp_campaignbudget: formValues.mp_campaignbudget,
        mbaidentifier: formValues.mbaidentifier,
        mbanumber: formValues.mbanumber,
        // Add other relevant data for the PDF
      };

      // Send data to API
      const response = await fetch("/api/mediaplans/download", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(mediaPlanData),
      });

      if (!response.ok) {
        // Try to get error message from response
        let errorMessage = "Failed to download media plan";
        try {
          const errorData = await response.json();
          if (errorData && errorData.error) {
            errorMessage = errorData.error;
          }
        } catch (e) {
          // If we can't parse the error JSON, just use the default message
          console.error("Could not parse error response:", e);
        }
        throw new Error(errorMessage);
      }

      // Get the PDF blob
      const pdfBlob = await response.blob();
      
      // Create a URL for the blob
      const url = window.URL.createObjectURL(pdfBlob);
      
      // Create a temporary link element
      const link = document.createElement("a");
      link.href = url;
      link.download = `MediaPlan_${formValues.mp_clientname}_${formValues.mp_campaignname}.pdf`;
      
      // Append to the document, click it, and remove it
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Revoke the URL to free up memory
      window.URL.revokeObjectURL(url);
      
      setModalOutcome(`Media plan PDF generated successfully!\n\nClient: ${formValues.mp_clientname}\nCampaign: ${formValues.mp_campaignname}\n\nDownloading media plan PDF...`);
      setModalLoading(false);
      
      // Show success message
      toast({
        title: "Success",
        description: "Media plan PDF generated successfully",
        variant: "default",
      });
    } catch (error) {
      console.error("Error downloading media plan:", error);
      setModalOutcome(`Error downloading media plan: ${error instanceof Error ? error.message : "Unknown error"}`);
      setModalLoading(false);
      
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to download media plan",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-full w-full p-6">
      <h1 className="text-3xl font-bold mb-6">Create Media Plan</h1>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="w-full space-y-6">
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 w-full">
            <FormField
              control={form.control}
              name={"mp_clientname" as keyof MediaPlanFormValues}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Client Name</FormLabel>
                  <Select
                    onValueChange={(value) => {
                      const selectedClient = clients.find((client) => client.id.toString() === value)
                      if (selectedClient) {
                        field.onChange(selectedClient.clientname_input)
                        handleClientChange(value)
                      }
                    }}
                    value={clients.find((client) => client.clientname_input === field.value)?.id.toString() || ""}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a client" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {clients.map((client) => (
                        <SelectItem key={client.id} value={client.id.toString()}>
                          {client.clientname_input}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name={"mp_campaignstatus" as keyof MediaPlanFormValues}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Campaign Status</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={String(field.value)}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select campaign status" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="draft">Draft</SelectItem>
                      <SelectItem value="planned">Planned</SelectItem>
                      <SelectItem value="approved">Approved</SelectItem>
                      <SelectItem value="booked">Booked</SelectItem>
                      <SelectItem value="completed">Completed</SelectItem>
                      <SelectItem value="cancelled">Cancelled</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name={"mp_campaignname" as keyof MediaPlanFormValues}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Campaign Name</FormLabel>
                  <FormControl>
                    <Input {...field} value={String(field.value)} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name={"mp_brand" as keyof MediaPlanFormValues}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Brand</FormLabel>
                  <FormControl>
                    <Input {...field} value={String(field.value)} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="mp_campaigndates_start"
              render={({ field }) => (
                <FormItem className="flex flex-col">
                  <FormLabel>Campaign Start Date</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant={"outline"}
                          className={cn("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground")}
                        >
                          {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        disabled={(date) => date > new Date("2100-01-01")}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="mp_campaigndates_end"
              render={({ field }) => (
                <FormItem className="flex flex-col">
                  <FormLabel>Campaign End Date</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant={"outline"}
                          className={cn("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground")}
                        >
                          {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        disabled={(date) => date > new Date("2100-01-01")}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="mp_clientcontact"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Client Contact</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="mp_ponumber"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>PO Number</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="mp_campaignbudget"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Campaign Budget</FormLabel>
                  <FormControl>
                    <Input
                      type="text"
                      {...field}
                      onChange={(e) => {
                        const value = e.target.value.replace(/[^0-9.]/g, "")
                        field.onChange(value ? Number(value) : 0)
                      }}
                      onBlur={(e) => {
                        const value = e.target.value.replace(/[^0-9.]/g, "")
                        const formattedValue = new Intl.NumberFormat("en-US", {
                          style: "currency",
                          currency: "USD",
                        }).format(Number(value) || 0)
                        e.target.value = formattedValue
                      }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="mbaidentifier"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>MBA Identifier</FormLabel>
                  <div className="p-2 bg-gray-100 rounded-md">{field.value || "No client selected"}</div>
                  <FormDescription>This field is automatically populated based on the selected client.</FormDescription>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="mbanumber"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>MBA Number</FormLabel>
                  <div className="p-2 bg-gray-100 rounded-md">{field.value || "No MBA Number generated"}</div>
                  <FormDescription>This field is automatically generated based on the MBA Identifier.</FormDescription>
                </FormItem>
              )}
            />
          </div>

          <div className="border border-gray-200 rounded-lg p-6 mt-6">
            <h2 className="text-xl font-semibold mb-4">Select Media Types</h2>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 w-full">
              {mediaTypes.map((medium) => (
                <FormField
                  key={medium.name}
                  control={form.control}
                  name={medium.name as keyof MediaPlanFormValues}
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-center space-x-3 space-y-0">
                      <FormControl>
                        <Switch checked={!!field.value} onCheckedChange={field.onChange} />
                      </FormControl>
                      <FormLabel className="font-normal">{medium.label}</FormLabel>
                    </FormItem>
                  )}
                />
              ))}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 border border-gray-300 rounded-lg p-6 mt-6">
      {/* MBA Details Section */}
        <div className="flex flex-col space-y-4 border border-gray-300 rounded-lg p-6 mt-6">
        <h3 className="text-lg font-semibold mb-4">MBA Details</h3>
  
       {/* Dynamic Media Totals */}
        <div className="grid grid-cols-2 gap-4">
         <div className="flex flex-col space-y-3">
         {mediaTypes.map((medium) => {
           if (form.watch(medium.name as keyof MediaPlanFormValues)) {
            return (
            <div key={medium.name} className="text-sm font-medium">
              {medium.label}
            </div>
          );
        }
        return null;
      })}
       </div>

       {/* Corresponding Media Totals */}
       <div className="flex flex-col space-y-3 text-right">
        {mediaTypes.map((medium) => {
        if (form.watch(medium.name as keyof MediaPlanFormValues)) {
          const total = calculateMediaTotal(medium.name);
          return (
            <div key={medium.name} className="text-sm font-medium">
              {new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              }).format(total)}
            </div>
          );
        }
        return null;
      })}
    </div>
  </div>

  {/* Separator */}
  <div className="border-t border-gray-400 my-4"></div>

  {/* Gross Media Total */}
<div className="grid grid-cols-2 gap-4 mb-2">
  <div className="text-sm font-semibold">Gross Media Total</div>
  <div className="text-sm font-semibold text-right">
    {new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(grossMediaTotal)}
  </div>
</div>

  {/* Assembled Fee */}
  <div className="grid grid-cols-2 gap-4 mb-2">
    <div className="text-sm font-semibold">Assembled Fee </div>
    <div className="text-sm font-semibold text-right">
      {new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(calculateAssembledFee())}
    </div>
  </div>

  {/* Ad Serving and Tech Fees */}
  <div className="grid grid-cols-2 gap-4 mb-2">
    <div className="text-sm font-semibold">Ad Serving & Tech Fees</div>
    <div className="text-sm font-semibold text-right">
      {new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(0)}
    </div>
  </div>

  {/* Production Costs */}
  <div className="grid grid-cols-2 gap-4">
    <div className="text-sm font-semibold">Production</div>
    <div className="text-sm font-semibold text-right">
      {new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(0)}
    </div>
  </div>

  {/* Total Investment (ex GST) */}
<div className="grid grid-cols-2 gap-4 mb-2">
  <div className="text-sm font-bold">Total Investment (ex GST)</div>
  <div className="text-sm font-bold text-right">
    {new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(totalInvestment)}
  </div>
</div>

</div>

{/* Billing Schedule Section */}
<div className="flex flex-col space-y-4 border border-gray-300 rounded-lg p-6 mt-6">
  <div className="flex justify-between items-center">
    <h3 className="text-lg font-semibold">Billing Schedule</h3>
    {!isManualBilling ? (
      <Button
        variant="outline"
        onClick={() => {
          setManualBillingMonths([...billingMonths]);
          setManualBillingTotal(billingTotal);
          setIsManualBillingModalOpen(true);
        }}
        className="bg-[#fd7adb] text-white font-bold hover:bg-[#fd7adb]/90"
      >
        Manual Billing
      </Button>
    ) : (
      <Button
        variant="outline"
        onClick={handleResetBilling}
        className="bg-[#fd7adb] text-white font-bold hover:bg-[#fd7adb]/90"
      >
        Reset to Automatic
      </Button>
    )}
  </div>

  {billingMonths.length === 0 ? (
    <p className="text-sm text-gray-500">No billing schedule available. Select campaign dates to generate.</p>
  ) : (
    <div className="flex flex-col space-y-4">
      {billingMonths.map((month, index) => {
        // Calculate monthly total
        const monthlyTotal = 
          parseFloat(month.assembledFee.replace(/[^0-9.]/g, "")) || 0 +
          parseFloat(month.adservingTechFees.replace(/[^0-9.]/g, "")) || 0 +
          parseFloat(month.production.replace(/[^0-9.]/g, "")) || 0 +
          Object.values(month.mediaCosts).reduce((sum, cost) => 
            sum + (parseFloat(cost.replace(/[^0-9.]/g, "")) || 0), 0);
        
        const formattedMonthlyTotal = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        }).format(monthlyTotal);
        
        return (
        <div key={index} className="flex items-center justify-between">
          <span className="text-sm font-medium">{month.monthYear}</span>
          <input
            type="text"
            className="border border-gray-300 rounded px-3 py-2"
            placeholder="$0.00"
              value={formattedMonthlyTotal}
            readOnly
          />
        </div>
        );
      })}
      <div className="border-t border-gray-400 my-4"></div>
      <div className="flex items-center justify-between font-semibold text-lg">
        <span>Total Billing:</span>
        <span>{billingTotal}</span>
      </div>
    </div>
  )}
</div>

{/* Manual Billing Modal */}
<Dialog open={isManualBillingModalOpen} onOpenChange={setIsManualBillingModalOpen}>
  <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
    <DialogHeader>
      <DialogTitle>Manual Billing Schedule</DialogTitle>
    </DialogHeader>
    <div className="space-y-4">
      <div className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Month</TableHead>
              <TableHead>Assembled Fee</TableHead>
              <TableHead>Adserving & Tech Fees</TableHead>
              <TableHead>Production</TableHead>
              {form.watch("mp_search") && <TableHead>Search Media</TableHead>}
              {form.watch("mp_socialmedia") && <TableHead>Social Media</TableHead>}
              {form.watch("mp_television") && <TableHead>Television</TableHead>}
              {form.watch("mp_radio") && <TableHead>Radio</TableHead>}
              {form.watch("mp_newspaper") && <TableHead>Newspaper</TableHead>}
              {form.watch("mp_magazines") && <TableHead>Magazines</TableHead>}
              {form.watch("mp_ooh") && <TableHead>OOH</TableHead>}
              {form.watch("mp_cinema") && <TableHead>Cinema</TableHead>}
              {form.watch("mp_digidisplay") && <TableHead>Digital Display</TableHead>}
              {form.watch("mp_digiaudio") && <TableHead>Digital Audio</TableHead>}
              {form.watch("mp_digivideo") && <TableHead>Digital Video</TableHead>}
              {form.watch("mp_bvod") && <TableHead>BVOD</TableHead>}
              {form.watch("mp_integration") && <TableHead>Integration</TableHead>}
              {form.watch("mp_progdisplay") && <TableHead>Prog Display</TableHead>}
              {form.watch("mp_progvideo") && <TableHead>Prog Video</TableHead>}
              {form.watch("mp_progbvod") && <TableHead>Prog BVOD</TableHead>}
              {form.watch("mp_progaudio") && <TableHead>Prog Audio</TableHead>}
              {form.watch("mp_progooh") && <TableHead>Prog OOH</TableHead>}
              {form.watch("mp_influencers") && <TableHead>Influencers</TableHead>}
              <TableHead className="font-bold">Monthly Total</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {manualBillingMonths.map((month, index) => {
              // Calculate monthly total
              const monthlyTotal = 
                parseFloat(month.assembledFee.replace(/[^0-9.]/g, "")) || 0 +
                parseFloat(month.adservingTechFees.replace(/[^0-9.]/g, "")) || 0 +
                parseFloat(month.production.replace(/[^0-9.]/g, "")) || 0 +
                Object.values(month.mediaCosts).reduce((sum, cost) => 
                  sum + (parseFloat(cost.replace(/[^0-9.]/g, "")) || 0), 0);
              
              const formattedMonthlyTotal = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              }).format(monthlyTotal);
              
              return (
                <TableRow key={index}>
                  <TableCell className="font-medium">{month.monthYear}</TableCell>
                  <TableCell>
                    <Input
                      type="text"
                      className="w-32"
                      value={month.assembledFee}
                      onChange={(e) => handleManualBillingChange(index, 'assembledFee', e.target.value)}
                      placeholder="$0.00"
                    />
                  </TableCell>
                  <TableCell>
                    <Input
                      type="text"
                      className="w-32"
                      value={month.adservingTechFees}
                      onChange={(e) => handleManualBillingChange(index, 'adservingTechFees', e.target.value)}
                      placeholder="$0.00"
                    />
                  </TableCell>
                  <TableCell>
                    <Input
                      type="text"
                      className="w-32"
                      value={month.production}
                      onChange={(e) => handleManualBillingChange(index, 'production', e.target.value)}
                      placeholder="$0.00"
                    />
                  </TableCell>
                  {form.watch("mp_search") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.search || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'search', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_socialmedia") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.socialMedia || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'socialMedia', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_television") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.television || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'television', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_radio") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.radio || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'radio', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_newspaper") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.newspaper || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'newspaper', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_magazines") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.magazines || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'magazines', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_ooh") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.ooh || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'ooh', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_cinema") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.cinema || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'cinema', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_digidisplay") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.digidisplay || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'digidisplay', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_digiaudio") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.digiaudio || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'digiaudio', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_digivideo") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.digivideo || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'digivideo', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_bvod") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.bvod || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'bvod', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_integration") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.integration || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'integration', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_progdisplay") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.progdisplay || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'progdisplay', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_progvideo") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.progvideo || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'progvideo', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_progbvod") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.progbvod || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'progbvod', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_progaudio") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.progaudio || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'progaudio', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_progooh") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.progooh || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'progooh', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  {form.watch("mp_influencers") && (
                    <TableCell>
                      <Input
                        type="text"
                        className="w-32"
                        value={month.mediaCosts.influencers || "$0.00"}
                        onChange={(e) => handleManualBillingChange(index, 'influencers', e.target.value)}
                        placeholder="$0.00"
                      />
                    </TableCell>
                  )}
                  <TableCell className="font-bold bg-gray-100">
                    {formattedMonthlyTotal}
                  </TableCell>
                </TableRow>
              );
            })}
            
            {/* Column Totals Row */}
            <TableRow className="font-bold bg-gray-100">
              <TableCell>Item Totals</TableCell>
              <TableCell>
                {new Intl.NumberFormat('en-US', {
                  style: 'currency',
                  currency: 'USD',
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                }).format(manualBillingMonths.reduce((sum, month) => 
                  sum + (parseFloat(month.assembledFee.replace(/[^0-9.]/g, "")) || 0), 0))}
              </TableCell>
              <TableCell>
                {new Intl.NumberFormat('en-US', {
                  style: 'currency',
                  currency: 'USD',
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                }).format(manualBillingMonths.reduce((sum, month) => 
                  sum + (parseFloat(month.adservingTechFees.replace(/[^0-9.]/g, "")) || 0), 0))}
              </TableCell>
              <TableCell>
                {new Intl.NumberFormat('en-US', {
                  style: 'currency',
                  currency: 'USD',
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                }).format(manualBillingMonths.reduce((sum, month) => 
                  sum + (parseFloat(month.production.replace(/[^0-9.]/g, "")) || 0), 0))}
              </TableCell>
              {form.watch("mp_search") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.search || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_socialmedia") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.socialMedia || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_television") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.television || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_radio") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.radio || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_newspaper") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.newspaper || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_magazines") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.magazines || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_ooh") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.ooh || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_cinema") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.cinema || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_digidisplay") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.digidisplay || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_digiaudio") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.digiaudio || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_digivideo") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.digivideo || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_bvod") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.bvod || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_integration") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.integration || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_progdisplay") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.progdisplay || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_progvideo") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.progvideo || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_progbvod") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.progbvod || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_progaudio") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.progaudio || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_progooh") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.progooh || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              {form.watch("mp_influencers") && (
                <TableCell>
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }).format(manualBillingMonths.reduce((sum, month) => 
                    sum + (parseFloat((month.mediaCosts.influencers || "$0.00").replace(/[^0-9.]/g, "")) || 0), 0))}
                </TableCell>
              )}
              <TableCell className="font-bold bg-gray-100">
                {manualBillingTotal}
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </div>
      <div className="border-t border-gray-400 my-4"></div>
      <div className="flex items-center justify-between font-semibold text-lg">
        <span>Total:</span>
        <span>{manualBillingTotal}</span>
      </div>
      {parseFloat(manualBillingTotal.replace(/[^0-9.]/g, "")) !== parseFloat(form.getValues("mp_campaignbudget").toString()) && (
        <div className="text-red-500 text-sm mt-2">
          Billing total must equal campaign budget
        </div>
      )}
    </div>
    <DialogFooter>
      <Button variant="outline" onClick={() => setIsManualBillingModalOpen(false)}>
        Cancel
      </Button>
      <Button 
        onClick={handleManualBillingSave}
        className="bg-[#008e5e] text-white hover:bg-[#008e5e]/90"
      >
        Save
      </Button>
    </DialogFooter>
  </DialogContent>
</Dialog>

       </div>

          {mediaTypes.map((medium) => {
  if (form.watch(medium.name as keyof MediaPlanFormValues) && medium.component) {
    const Component = medium.component;
    const componentProps = {
      clientId: selectedClientId,
      ...(medium.name === "mp_search" && { 
        feesearch, 
        onTotalMediaChange: handleSearchTotalChange, 
        onBurstsChange: handleSearchBurstsChange,
        onInvestmentChange: handleInvestmentChange
      }),
      ...(medium.name === "mp_socialmedia" && { 
        feesocial, 
        onTotalMediaChange: handleSocialMediaTotalChange,
        onBurstsChange: handleSocialMediaBurstsChange
      }),
    };
    return (
      <div key={medium.name} className="border border-gray-200 rounded-lg p-6 mt-6">
        <h2 className="text-xl font-semibold mb-4"></h2>
        <Suspense fallback={<div>Loading {medium.label}...</div>}>
          {medium.name === "mp_search" && (
            <Suspense fallback={<div>Loading search container...</div>}>
              <SearchContainer
                clientId={selectedClientId}
                feesearch={feesearch}
                onTotalMediaChange={handleSearchTotalChange}
                onBurstsChange={handleSearchBurstsChange}
                onInvestmentChange={handleInvestmentChange}
              />
            </Suspense>
          )}
          {medium.name === "mp_socialmedia" && (
            <Suspense fallback={<div>Loading Social Media...</div>}>
              <SocialMediaContainer
                clientId={selectedClientId}
                onTotalMediaChange={handleSocialMediaTotalChange}
                onBurstsChange={handleSocialMediaBurstsChange}
                feesocial={feesocial}
              />
            </Suspense>
          )}
        </Suspense>
      </div>
    );
  }
  return null;
})}

        </form>
      </Form>
      
      {/* Sticky Banner */}
      <div className="fixed bottom-0 left-0 right-0 bg-background border-t p-4 flex justify-end space-x-2 z-50">
        <Button
          onClick={handleSaveCampaign}
          disabled={isLoading}
          className="bg-[#008e5e] text-white hover:bg-[#008e5e]/90"
        >
          {isLoading ? "Saving..." : "Save Campaign"}
          </Button>
          <Button
           onClick={handleGenerateMBA}
            disabled={isLoading}
          className="bg-[#fd7adb] text-white hover:bg-[#fd7adb]/90"
>
          {isLoading ? "Generating..." : "Generate MBA"}
          </Button>
        <Button
          onClick={handleDownloadMediaPlan}
          disabled={isLoading}
          className="bg-[#fd7adb] text-white hover:bg-[#fd7adb]/90"
        >
          {isLoading ? "Downloading..." : "Download Media Plan"}
        </Button>
        <Button
          onClick={handleSaveAndGenerateAll}
          disabled={isLoading}
          className="bg-[#008e5e] text-white hover:bg-[#008e5e]/90"
        >
          {isLoading ? "Processing..." : "Save & Generate All"}
        </Button>
      </div>
      
      {/* Outcome Modal */}
      <OutcomeModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        title={modalTitle}
        outcome={modalOutcome}
        isLoading={modalLoading}
      />
    </div>
  )
}
;
